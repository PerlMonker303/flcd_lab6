program ::= "START" cmds "FINISH"
cmds ::= cmd {cmds}
cmd ::= simplecmd | structcmd
simplecmd ::= defcmd | assigncmd | readcmd | printcmd
defcmd ::= "DEF" declist
declist ::= declaration | declaration ";" declist
declaration ::= identifier ":" dtype
dtype ::= primitive | arraydecl
primitive ::= "NUMBER" | "STRING" | "CHAR"
arraydecl ::= "ARRAY" "[" constno "]" "OF" primitive
assigncmd ::= "ASSIGN" identifier “:” (symbolvalue | “(“ expression “)” )
symbolvalue ::= identifier | constno | constchar | conststring | arrayelement
expression ::= term | expression “+” term | expression “-” term
term ::= term ("*" | “/”) factor | factor
factor ::= "(" expression ")" | (identifier | constno | constchar | conststring | arrayelement)
arrayelement ::= identifier "[" (constno | identifier) "]"
readcmd ::= "READ" identifier
printcmd ::= "PRINT" "(" expressionprint ")"
expressionprint ::= factorprint | expressionprint “+” factorprint
factorprint ::= constno | constchar | conststring | callstmt
structcmd ::= ifstmt | whilestmt | procstmt | callstmt
ifstmt ::= "IF" condition "STARTIF" cmds "FINISHIF"
condition ::= symbolvalue comparisonoperator symbolvalue [logicaloperator condition]
comparisonoperator ::= "<" | ">" | "<=" | ">=" | "===" | "!=="
logicaloperator ::= "&&" | "||"
whilestmt ::= "WHILE" condition "STARTWHILE" cmds "FINISHWHILE"
procstmt ::= "PROC" identifier "(" [declist] ")" "STARTPROC" cmds "FINISHPROC"
callstmt ::= "CALL" identifier "(" [paramslist] ")"
paramslist ::= symbolvalue | symbolvalue "," paramslist
